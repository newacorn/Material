
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 自定义设置（该文件放一般性配置，若要增加插件，请放入~/.vimrc.plugins）
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
inoremap jk <esc>
inoremap kj <esc>
"noremap <leader>u "*y
"noremap <leader>yy "*Y

highlight Cursor guifg=white guibg=#ffb472
highlight iCursor guifg=white guibg=steelblue
set guicursor=n-v-c:block-Cursor
set guicursor+=i:ver100-iCursor
set guicursor+=n-v-c:blinkon0
set guicursor+=i:blinkwait10


if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif
:autocmd InsertEnter * set cul
:autocmd InsertLeave * set nocul
set mouse=a
hi Pmenu ctermfg=56 ctermbg=255
hi PmenuSel ctermfg=255 ctermbg = 200

"持久化undo
if has('persistent_undo') "check if your vim version supports it 
    set undofile "turn on the feature 
    set undodir=$HOME/.vim/undo "directory where the undo files will be stored 
endif

map <Leader><leader>h <Plug>(easymotion-linebackward)
map <Leader><leader>l <Plug>(easymotion-lineforward)
map <Leader><leader>. <Plug>(easymotion-repeat)
map <Leader><leader>W <Plug>(easymotion-W)
map <leader><leader>B <Plug>(easymotion-B)

" 开启相对行号
"
"
"
"
"
"
"" set relativenumber  

" 开启鼠标
" set mouse=a

" 设置光标所在列高亮
" set cursorcolumn

" indentLine 开启代码对齐线
" let g:indentLine_enabled = 1

" markdown
" let system = system('uname -s')
" if system == "Darwin\n"
"     let g:mkdp_path_to_chrome = "/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome"
" else
"     let g:mkdp_path_to_chrome = '/usr/bin/google-chrome-stable %U'
" endif
" nmap <silent> <F7> <Plug>MarkdownPreview
" imap <silent> <F7> <Plug>MarkdownPreview
" nmap <silent> <F8> <Plug>StopMarkdownPreview
" imap <silent> <F8> <Plug>StopMarkdownPreview

" Doxygen
" let g:DoxygenToolkit_authorName="chxuan, 787280310@qq.com"
" let s:licenseTag = "Copyright(C)\<enter>"
" let s:licenseTag = s:licenseTag . "For free\<enter>"
" let s:licenseTag = s:licenseTag . "All right reserved\<enter>"
" let g:DoxygenToolkit_licenseTag = s:licenseTag
" let g:DoxygenToolkit_briefTag_funcName="yes"
" let g:doxygen_enhanced_color=1
" let g:DoxygenToolkit_commentType="Qt"

"ag configureation
"let g:ackprg = 'ag --nogroup --nocolor --column'
if executable('ag')
  let g:ackprg = 'ag --hidden --vimgrep'
endif


"let g:Lf_WindowPosition = 'popup'
"let g:Lf_DefaultExternalTool="Ag"

command! -bang -nargs=? -complete=dir HFiles
  \ call fzf#vim#files(<q-args>, {'source': 'ag --hidden --ignore .git -g ""'}, <bang>0)

function! RipgrepFzf(query, fullscreen)

let pos = strridx(a:query," ")
let len = strlen(a:query)
let dir = strcharpart(a:query,pos,len-pos)


  let command_fmt = 'rg --column --line-number --no-heading --hidden --color=always --smart-case %s || true'
  let command_fmta = 'rg --column --line-number --no-heading --hidden --color=always --smart-case %s  %s|| true'




  let initial_command = printf(command_fmt, a:query)
  let reload_command = printf(command_fmta, '{q}', dir)
  let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

command! -nargs=* -bang Rg call RipgrepFzf(<q-args>, <bang>0)

command! -bang -nargs=* SS call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case ".(<q-args>), 1, {'options': '--delimiter : --nth 4..'}, <bang>0)
command! -bang -nargs=* S call fzf#vim#grep("rg --column --line-number --hidden --no-heading --color=always --smart-case ".(<q-args>), 1, {'opStions': ['--layout=reverse', '--info=inline', '--preview', 'cat {}']}, <bang>0)



      " don't show the help in normal mode

command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, {'options': ['--layout=reverse', '--info=inline', '--preview', '~/.vim/plugged/fzf.vim/bin/preview.sh {}']}, <bang>0)
